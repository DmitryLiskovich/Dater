{"ast":null,"code":"var _jsxFileName = \"D:\\\\Dater\\\\dater\\\\src\\\\components\\\\Tasks\\\\Tasks.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\"; // @material-ui/core components\n\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\"; // @material-ui/icons\n\nimport Edit from \"@material-ui/icons/Edit\";\nimport Close from \"@material-ui/icons/Close\";\nimport Check from \"@material-ui/icons/Check\"; // core components\n\nimport tasksStyle from \"assets/jss/material-dashboard-react/components/tasksStyle.jsx\";\n\nclass Tasks extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      checked: this.props.checkedIndexes\n    };\n\n    this.handleToggle = value => () => {\n      const checked = this.state.checked;\n      const currentIndex = checked.indexOf(value);\n      const newChecked = [...checked];\n\n      if (currentIndex === -1) {\n        newChecked.push(value);\n      } else {\n        newChecked.splice(currentIndex, 1);\n      }\n\n      this.setState({\n        checked: newChecked\n      });\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          tasksIndexes = _this$props.tasksIndexes,\n          tasks = _this$props.tasks,\n          rtlActive = _this$props.rtlActive;\n    const tableCellClasses = classnames(classes.tableCell, {\n      [classes.tableCellRTL]: rtlActive\n    });\n    return React.createElement(Table, {\n      className: classes.table,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(TableBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, tasksIndexes.map(value => React.createElement(TableRow, {\n      key: value,\n      className: classes.tableRow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      className: tableCellClasses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      checked: this.state.checked.indexOf(value) !== -1,\n      tabIndex: -1,\n      onClick: this.handleToggle(value),\n      checkedIcon: React.createElement(Check, {\n        className: classes.checkedIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }),\n      icon: React.createElement(Check, {\n        className: classes.uncheckedIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }),\n      classes: {\n        checked: classes.checked,\n        root: classes.root\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    })), React.createElement(TableCell, {\n      className: tableCellClasses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, tasks[value]), React.createElement(TableCell, {\n      className: classes.tableActions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      id: \"tooltip-top\",\n      title: \"Edit Task\",\n      placement: \"top\",\n      classes: {\n        tooltip: classes.tooltip\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      \"aria-label\": \"Edit\",\n      className: classes.tableActionButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Edit, {\n      className: classes.tableActionButtonIcon + \" \" + classes.edit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }))), React.createElement(Tooltip, {\n      id: \"tooltip-top-start\",\n      title: \"Remove\",\n      placement: \"top\",\n      classes: {\n        tooltip: classes.tooltip\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      \"aria-label\": \"Close\",\n      className: classes.tableActionButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(Close, {\n      className: classes.tableActionButtonIcon + \" \" + classes.close,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }))))))));\n  }\n\n}\n\nTasks.propTypes = {\n  classes: PropTypes.object.isRequired,\n  tasksIndexes: PropTypes.arrayOf(PropTypes.number),\n  tasks: PropTypes.arrayOf(PropTypes.node),\n  rtlActive: PropTypes.bool\n};\nexport default withStyles(tasksStyle)(Tasks);","map":{"version":3,"sources":["D:\\Dater\\dater\\src\\components\\Tasks\\Tasks.jsx"],"names":["React","PropTypes","classnames","withStyles","Checkbox","Tooltip","IconButton","Table","TableRow","TableBody","TableCell","Edit","Close","Check","tasksStyle","Tasks","Component","state","checked","props","checkedIndexes","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","setState","render","classes","tasksIndexes","tasks","rtlActive","tableCellClasses","tableCell","tableCellRTL","table","map","tableRow","checkedIcon","uncheckedIcon","root","tableActions","tooltip","tableActionButton","tableActionButtonIcon","edit","close","propTypes","object","isRequired","arrayOf","number","node","bool"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classnames from \"classnames\";\r\n// @material-ui/core components\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\n// @material-ui/icons\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport Close from \"@material-ui/icons/Close\";\r\nimport Check from \"@material-ui/icons/Check\";\r\n// core components\r\nimport tasksStyle from \"assets/jss/material-dashboard-react/components/tasksStyle.jsx\";\r\n\r\nclass Tasks extends React.Component {\r\n  state = {\r\n    checked: this.props.checkedIndexes\r\n  };\r\n  handleToggle = value => () => {\r\n    const { checked } = this.state;\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    this.setState({\r\n      checked: newChecked\r\n    });\r\n  };\r\n  render() {\r\n    const { classes, tasksIndexes, tasks, rtlActive } = this.props;\r\n    const tableCellClasses = classnames(classes.tableCell, {\r\n      [classes.tableCellRTL]: rtlActive\r\n    })\r\n    return (\r\n      <Table className={classes.table}>\r\n        <TableBody>\r\n          {tasksIndexes.map(value => (\r\n            <TableRow key={value} className={classes.tableRow}>\r\n              <TableCell className={tableCellClasses}>\r\n                <Checkbox\r\n                  checked={this.state.checked.indexOf(value) !== -1}\r\n                  tabIndex={-1}\r\n                  onClick={this.handleToggle(value)}\r\n                  checkedIcon={<Check className={classes.checkedIcon} />}\r\n                  icon={<Check className={classes.uncheckedIcon} />}\r\n                  classes={{\r\n                    checked: classes.checked,\r\n                    root: classes.root\r\n                  }}\r\n                />\r\n              </TableCell>\r\n              <TableCell className={tableCellClasses}>\r\n                {tasks[value]}\r\n              </TableCell>\r\n              <TableCell className={classes.tableActions}>\r\n                <Tooltip\r\n                  id=\"tooltip-top\"\r\n                  title=\"Edit Task\"\r\n                  placement=\"top\"\r\n                  classes={{ tooltip: classes.tooltip }}\r\n                >\r\n                  <IconButton\r\n                    aria-label=\"Edit\"\r\n                    className={classes.tableActionButton}\r\n                  >\r\n                    <Edit\r\n                      className={\r\n                        classes.tableActionButtonIcon + \" \" + classes.edit\r\n                      }\r\n                    />\r\n                  </IconButton>\r\n                </Tooltip>\r\n                <Tooltip\r\n                  id=\"tooltip-top-start\"\r\n                  title=\"Remove\"\r\n                  placement=\"top\"\r\n                  classes={{ tooltip: classes.tooltip }}\r\n                >\r\n                  <IconButton\r\n                    aria-label=\"Close\"\r\n                    className={classes.tableActionButton}\r\n                  >\r\n                    <Close\r\n                      className={\r\n                        classes.tableActionButtonIcon + \" \" + classes.close\r\n                      }\r\n                    />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\nTasks.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  tasksIndexes: PropTypes.arrayOf(PropTypes.number),\r\n  tasks: PropTypes.arrayOf(PropTypes.node),\r\n  rtlActive: PropTypes.bool\r\n};\r\n\r\nexport default withStyles(tasksStyle)(Tasks);\r\n"]},"metadata":{},"sourceType":"module"}